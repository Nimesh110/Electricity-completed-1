import streamlit as st
import pandas as pd

st.title("Electricity Bill Calculator",width="stretch")

#Initialize Variables
noOfUnits=0

#Create columns to control layout
col1,col2,col3=st.columns([3,1,1]) #‚úÖüß†Column ‡∂∏‡∑î‡∑Ö‡∑î ‡∂ë‡∂ö‡∂≠‡∑î‡∑Ä ‡∂∏‡∂≠ ‡∂¥‡∂Ø‡∂±‡∂∏‡∑ä‡∑Ä ‡∂Ö‡∂±‡∑î‡∂¥‡∑è‡∂≠ ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫‡∂ö‡∂ª‡∂´‡∂∫ ‡∑Ä‡∑ö. 60%,20%,20%

with col1:
    #radio button to choose input type
    status=st.radio("Select an option:",['Readings','No of Units'],horizontal=True)

    #input logic
    if status == "Readings":                                                                             #‚úÖüß† format="%d" -- ‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∑É‡∂Ç‡∂õ‡∑ä‚Äç‡∂∫‡∑è‡∑Ä‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‡∂¥‡∂∏‡∂´‡∂ö‡∑ä ‡∂Ü‡∂ö‡∑ò‡∂≠‡∑í‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂± (‡∂ë‡∂±‡∂∏‡∑ä, ‡∂Ø‡∑Å‡∂∏ ‡∂Ω‡∂ö‡∑ä‡∑Ç‡∑ä‚Äç‡∂∫ ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∑è ‡∂±‡∑ê‡∂≠).
        preReading =st.number_input("Enter last month reading",key="pre",min_value=0,step=1,format="%d") #‚úÖüß† step=1 -- ‡∂â‡∑Ñ‡∑Ö/‡∂¥‡∑Ñ‡∑Ö ‡∂ä‡∂≠‡∂Ω ‡∂ö‡∑ä‡∂Ω‡∑í‡∂ö‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ô‡∂±‡∑ä ‡∑É‡∂Ç‡∂õ‡∑ä‚Äç‡∂∫‡∑è‡∑Ä 1 ‡∂ö‡∑í‡∂±‡∑ä ‡∑Ä‡∑ê‡∂©‡∑í ‡∑Ä‡∑ö/‡∂Ö‡∂©‡∑î ‡∑Ä‡∑ö.
        curReading=st.number_input("Enter this month reading",key="cur",min_value=0,step=1,format="%d")  #‚úÖüß† min_value=0 -- ‡∂¥‡∂ª‡∑í‡∑Å‡∑ì‡∂Ω‡∂ö‡∂∫‡∑í‡∂±‡∑ä ‡∑É‡∑ò‡∂´ ‡∂Ö‡∂ú‡∂∫‡∂±‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ô‡∂±‡∑ä ‡∑Ä‡∑Ö‡∂ö‡∑ä‡∑Ä‡∂∫‡∑í. ‡∂∏‡∑ì‡∂ß‡∂ª ‡∂ö‡∑í‡∂∫‡∑Ä‡∑ì‡∂∏‡∑ä ‡∑É‡∑ò‡∂´ ‡∑Ä‡∑í‡∂∫ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö.
                                                                                                         # ‚ö†Ô∏è ‡∑Ä‡∑ê‡∂Ø‡∂ú‡∂≠‡∑ä: st.number_input ‡∑É‡∑ë‡∂∏ ‡∑Ä‡∑í‡∂ß‡∂∏ ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä ‡∂Ü‡∂¥‡∑É‡∑î ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂∫‡∑í, ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∂á‡∂≠‡∑î‡∑Ö‡∂≠‡∑ä ‡∂±‡∑ú‡∂ö‡∑Ö‡∑Ñ‡∑ú‡∂≠‡∑ä defaulting 0 ‡∑Ä‡∑ö.
        if preReading and curReading:
            preReading=int(preReading)
            curReading =int(curReading)

            if curReading > preReading:
                noOfUnits=curReading - preReading
            else:
                st.warning("Current reading must be greater than or equal to previous reading.")

    elif status == "No of Units":
        noOfUnits=st.number_input("Enter number of units used",key="units",min_value=0,step=1,format="%d")


    #calculate button
    if st.button("Calculate") and noOfUnits > 0:
        try:
            row=[] #‚úÖüß†‡∂∂‡∑í‡∂Ω‡∑ä‡∂¥‡∂≠‡∑ä OUTPUT ‡∑Ä‡∂ú‡∑î‡∑Ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂ë‡∂ö‡∑ä ‡∂ë‡∂ö‡∑ä ‡∂¥‡∑ö‡∑Ö‡∑í‡∂∫‡∑ö ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂ú‡∂∂‡∂©‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß  ‡∂ë‡∂∫ ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑î ‡∂á‡∂≠.

            #fixed charge
            fixed_charge=round(350.00,2)
            unit_cost=0.00
            units_remaining=noOfUnits

            #for first 20 units
            if units_remaining >0:
                units=min(20,units_remaining)
                cost=round(5.00*units,2) #‚úÖüß† 2 ‡∂∫‡∑ú‡∂Ø‡∑è ‡∂á‡∂≠‡∑ä‡∂≠‡∑ö ‡∂Ü‡∑É‡∂±‡∑ä‡∂± ‡∂Ø‡∑Å‡∂∏‡∑É‡∑ä‡∂Æ‡∑è‡∂± ‡∂Ø‡∑ô‡∂ö‡∂ö‡∂ß ‡∂¥‡∑í‡∂Ω‡∑í‡∂≠‡∑î‡∂ª ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è‡∂∫.
                row.append(["First 20 units",units,5.00,cost])
                unit_cost += cost
                units_remaining -= units

            #for second 50 units
            if units_remaining >0:
                units=min(50,units_remaining)
                cost=round(7.00*units,2)
                row.append(["Second 50 units",units,7.00,cost])
                unit_cost += cost
                units_remaining -= units

            #remaining units
            if units_remaining >0:
                cost=round(units_remaining * 10.00,2)
                row.append(["Remaining units",units_remaining,10.00,cost])
                unit_cost += cost

            total_cost=fixed_charge + unit_cost

            #add fixed charge
            row.append(["Fixed Charge", "--","--",fixed_charge])

            total_cost=round(unit_cost + fixed_charge,2)
            row.append(["Total Charge","--","--",total_cost])

            #show result
            st.info(f"Total Charge: Rs.{total_cost:.2f}")

            #convert to dataframe and show table
            df=pd.DataFrame(row,columns=["Description","Units(KWh)","Rate (Rs.)","Cost (Rs.)"]) #‚úÖüß†DataFrame ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∫‡∂±‡∑î Excel ‡∑Ä‡∂ú‡∑î‡∑Ä‡∂ö‡∑ä ‡∑Ä‡∑ê‡∂±‡∑í‡∂∫ ‚Äî ‡∂Ω‡∑ö‡∂∂‡∂Ω‡∑ä ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø ‡∑Å‡∑ì‡∂ª‡∑ä‡∑Ç ‡∑É‡∑Ñ‡∑í‡∂≠ ‡∂¥‡∑ö‡∑Ö‡∑í ‡∑É‡∑Ñ ‡∂≠‡∑ì‡∂ª‡∑î.‡∂ë‡∂∫ Python ‡∑Ñ‡∑í ‡∑Ä‡∂ú‡∑î ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∑É‡∂∏‡∂ü ‡∑Ä‡∑ê‡∂© ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂± pandas ‡∂¥‡∑î‡∑É‡∑ä‡∂≠‡∂ö‡∑è‡∂Ω‡∂∫‡∑ö ‡∂ö‡∑ú‡∂ß‡∑É‡∂ö‡∑í.

            #format the rate and cost columns
            df["Rate (Rs.)"] = df["Rate (Rs.)"].apply(lambda x: f"{x:.2f}" if isinstance(x,(int,float))else x)
            df["Cost (Rs.)"] = df["Cost (Rs.)"].apply(lambda x: f"{x:.2f}" if isinstance(x,(int,float))else x)
            st.table(df)

            with col2:
                if st.button("Reset"):
                    st.session_state["pre"] = 0
                    st.session_state["cur"] = 0


        except Exception as e:
            st.error(f"Error calculating bill:{e}")
